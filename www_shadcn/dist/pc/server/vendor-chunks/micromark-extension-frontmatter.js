"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-frontmatter";
exports.ids = ["vendor-chunks/micromark-extension-frontmatter"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-frontmatter/dev/lib/syntax.js":
/*!************************************************************************!*\
  !*** ./node_modules/micromark-extension-frontmatter/dev/lib/syntax.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   frontmatter: () => (/* binding */ frontmatter)\n/* harmony export */ });\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ \"(ssr)/./node_modules/micromark-util-symbol/codes.js\");\n/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ \"(ssr)/./node_modules/micromark-util-symbol/types.js\");\n/* harmony import */ var _matters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matters.js */ \"(ssr)/./node_modules/micromark-extension-frontmatter/dev/matters.js\");\n/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef {import('../matters.js').Info} Info\n * @typedef {import('../matters.js').Matter} Matter\n * @typedef {import('../matters.js').Options} Options\n */\n\n\n\n\n\n\n/**\n * Create an extension for `micromark` to enable frontmatter syntax.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable frontmatter syntax.\n */\nfunction frontmatter(options) {\n  const listOfMatters = (0,_matters_js__WEBPACK_IMPORTED_MODULE_0__.matters)(options)\n  /** @type {ConstructRecord} */\n  const flow = {}\n  let index = -1\n\n  while (++index < listOfMatters.length) {\n    const matter = listOfMatters[index]\n    const code = fence(matter, 'open').charCodeAt(0)\n    const construct = createConstruct(matter)\n    const existing = flow[code]\n\n    if (Array.isArray(existing)) {\n      existing.push(construct)\n    } else {\n      // Never a single object, always an array.\n      flow[code] = [construct]\n    }\n  }\n\n  return {flow}\n}\n\n/**\n * @param {Matter} matter\n * @returns {Construct}\n */\nfunction createConstruct(matter) {\n  const anywhere = matter.anywhere\n  const frontmatterType = /** @type {TokenType} */ (matter.type)\n  const fenceType = /** @type {TokenType} */ (frontmatterType + 'Fence')\n  const sequenceType = /** @type {TokenType} */ (fenceType + 'Sequence')\n  const valueType = /** @type {TokenType} */ (frontmatterType + 'Value')\n  const closingFenceConstruct = {tokenize: tokenizeClosingFence, partial: true}\n\n  /**\n   * Fence to look for.\n   *\n   * @type {string}\n   */\n  let buffer\n  let bufferIndex = 0\n\n  return {tokenize: tokenizeFrontmatter, concrete: true}\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeFrontmatter(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /**\n     * Start of frontmatter.\n     *\n     * ```markdown\n     * > | ---\n     *     ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      const position = self.now()\n\n      if (\n        // Indent not allowed.\n        position.column === 1 &&\n        // Normally, only allowed in first line.\n        (position.line === 1 || anywhere)\n      ) {\n        buffer = fence(matter, 'open')\n        bufferIndex = 0\n\n        if (code === buffer.charCodeAt(bufferIndex)) {\n          effects.enter(frontmatterType)\n          effects.enter(fenceType)\n          effects.enter(sequenceType)\n          return openSequence(code)\n        }\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In open sequence.\n     *\n     * ```markdown\n     * > | ---\n     *     ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openSequence(code) {\n      if (bufferIndex === buffer.length) {\n        effects.exit(sequenceType)\n\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code)) {\n          effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)\n          return openSequenceWhitespace(code)\n        }\n\n        return openAfter(code)\n      }\n\n      if (code === buffer.charCodeAt(bufferIndex++)) {\n        effects.consume(code)\n        return openSequence\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In whitespace after open sequence.\n     *\n     * ```markdown\n     * > | ---␠\n     *        ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openSequenceWhitespace(code) {\n      if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code)) {\n        effects.consume(code)\n        return openSequenceWhitespace\n      }\n\n      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)\n      return openAfter(code)\n    }\n\n    /**\n     * After open sequence.\n     *\n     * ```markdown\n     * > | ---\n     *        ^\n     *   | title: \"Venus\"\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function openAfter(code) {\n      if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n        effects.exit(fenceType)\n        effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding)\n        effects.consume(code)\n        effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding)\n        // Get ready for closing fence.\n        buffer = fence(matter, 'close')\n        bufferIndex = 0\n        return effects.attempt(closingFenceConstruct, after, contentStart)\n      }\n\n      // EOF is not okay.\n      return nok(code)\n    }\n\n    /**\n     * Start of content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *     ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentStart(code) {\n      if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n        return contentEnd(code)\n      }\n\n      effects.enter(valueType)\n      return contentInside(code)\n    }\n\n    /**\n     * In content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *     ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentInside(code) {\n      if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n        effects.exit(valueType)\n        return contentEnd(code)\n      }\n\n      effects.consume(code)\n      return contentInside\n    }\n\n    /**\n     * End of content chunk.\n     *\n     * ```markdown\n     *   | ---\n     * > | title: \"Venus\"\n     *                   ^\n     *   | ---\n     * ```\n     *\n     * @type {State}\n     */\n    function contentEnd(code) {\n      // Require a closing fence.\n      if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {\n        return nok(code)\n      }\n\n      // Can only be an eol.\n      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding)\n      effects.consume(code)\n      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding)\n      return effects.attempt(closingFenceConstruct, after, contentStart)\n    }\n\n    /**\n     * After frontmatter.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      // `code` must be eol/eof.\n      effects.exit(frontmatterType)\n      return ok(code)\n    }\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeClosingFence(effects, ok, nok) {\n    let bufferIndex = 0\n\n    return closeStart\n\n    /**\n     * Start of close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeStart(code) {\n      if (code === buffer.charCodeAt(bufferIndex)) {\n        effects.enter(fenceType)\n        effects.enter(sequenceType)\n        return closeSequence(code)\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeSequence(code) {\n      if (bufferIndex === buffer.length) {\n        effects.exit(sequenceType)\n\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code)) {\n          effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)\n          return closeSequenceWhitespace(code)\n        }\n\n        return closeAfter(code)\n      }\n\n      if (code === buffer.charCodeAt(bufferIndex++)) {\n        effects.consume(code)\n        return closeSequence\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In whitespace after close sequence.\n     *\n     * ```markdown\n     * > | ---\n     *   | title: \"Venus\"\n     *   | ---␠\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeSequenceWhitespace(code) {\n      if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownSpace)(code)) {\n        effects.consume(code)\n        return closeSequenceWhitespace\n      }\n\n      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)\n      return closeAfter(code)\n    }\n\n    /**\n     * After close sequence.\n     *\n     * ```markdown\n     *   | ---\n     *   | title: \"Venus\"\n     * > | ---\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function closeAfter(code) {\n      if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {\n        effects.exit(fenceType)\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @param {Matter} matter\n * @param {'open' | 'close'} prop\n * @returns {string}\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: They’re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * @param {Info | string} schema\n * @param {'open' | 'close'} prop\n * @returns {string}\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-frontmatter/dev/lib/syntax.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-frontmatter/dev/matters.js":
/*!*********************************************************************!*\
  !*** ./node_modules/micromark-extension-frontmatter/dev/matters.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   matters: () => (/* binding */ matters)\n/* harmony export */ });\n/* harmony import */ var fault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fault */ \"(ssr)/./node_modules/fault/index.js\");\n/**\n * @typedef {'toml' | 'yaml'} Preset\n *   Known name of a frontmatter style.\n *\n * @typedef Info\n *   Sequence.\n *\n *   Depending on how this structure is used, it reflects a marker or a fence.\n * @property {string} open\n *   Opening.\n * @property {string} close\n *   Closing.\n *\n * @typedef MatterProps\n *   Fields describing a kind of matter.\n * @property {string} type\n *   Node type to tokenize as.\n * @property {boolean | null | undefined} [anywhere=false]\n *   Whether matter can be found anywhere in the document, normally, only matter\n *   at the start of the document is recognized.\n *\n *   > 👉 **Note**: using this is a terrible idea.\n *   > It’s called frontmatter, not matter-in-the-middle or so.\n *   > This makes your markdown less portable.\n *\n * @typedef MarkerProps\n *   Marker configuration.\n * @property {Info | string} marker\n *   Character repeated 3 times, used as complete fences.\n *\n *   For example the character `'-'` will result in `'---'` being used as the\n *   fence\n *   Pass `open` and `close` to specify different characters for opening and\n *   closing fences.\n * @property {never} [fence]\n *   If `marker` is set, `fence` must not be set.\n *\n * @typedef FenceProps\n *   Fence configuration.\n * @property {Info | string} fence\n *   Complete fences.\n *\n *   This can be used when fences contain different characters or lengths\n *   other than 3.\n *   Pass `open` and `close` to interface to specify different characters for opening and\n *   closing fences.\n * @property {never} [marker]\n *   If `fence` is set, `marker` must not be set.\n *\n * @typedef {(MatterProps & FenceProps) | (MatterProps & MarkerProps)} Matter\n *   Fields describing a kind of matter.\n *\n *   > 👉 **Note**: using `anywhere` is a terrible idea.\n *   > It’s called frontmatter, not matter-in-the-middle or so.\n *   > This makes your markdown less portable.\n *\n *   > 👉 **Note**: `marker` and `fence` are mutually exclusive.\n *   > If `marker` is set, `fence` must not be set, and vice versa.\n *\n * @typedef {Matter | Preset | Array<Matter | Preset>} Options\n *   Configuration.\n */\n\n\n\nconst own = {}.hasOwnProperty\nconst markers = {yaml: '-', toml: '+'}\n\n/**\n * Simplify one or more options.\n *\n * @param {Options | null | undefined} [options='yaml']\n *   Configuration.\n * @returns {Array<Matter>}\n *   List of matters.\n */\nfunction matters(options) {\n  /** @type {Array<Matter>} */\n  const result = []\n  let index = -1\n\n  /** @type {Array<Matter | Preset>} */\n  const presetsOrMatters = Array.isArray(options)\n    ? options\n    : options\n    ? [options]\n    : ['yaml']\n\n  while (++index < presetsOrMatters.length) {\n    result[index] = matter(presetsOrMatters[index])\n  }\n\n  return result\n}\n\n/**\n * Simplify an option.\n *\n * @param {Matter | Preset} option\n *   Configuration.\n * @returns {Matter}\n *   Matters.\n */\nfunction matter(option) {\n  let result = option\n\n  if (typeof result === 'string') {\n    if (!own.call(markers, result)) {\n      throw (0,fault__WEBPACK_IMPORTED_MODULE_0__.fault)('Missing matter definition for `%s`', result)\n    }\n\n    result = {type: result, marker: markers[result]}\n  } else if (typeof result !== 'object') {\n    throw (0,fault__WEBPACK_IMPORTED_MODULE_0__.fault)('Expected matter to be an object, not `%j`', result)\n  }\n\n  if (!own.call(result, 'type')) {\n    throw (0,fault__WEBPACK_IMPORTED_MODULE_0__.fault)('Missing `type` in matter `%j`', result)\n  }\n\n  if (!own.call(result, 'fence') && !own.call(result, 'marker')) {\n    throw (0,fault__WEBPACK_IMPORTED_MODULE_0__.fault)('Missing `marker` or `fence` in matter `%j`', result)\n  }\n\n  return result\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1mcm9udG1hdHRlci9kZXYvbWF0dGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0EsY0FBYyw0QkFBNEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxlQUFlO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZUFBZTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBLGFBQWEsMERBQTBEO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMENBQTBDO0FBQ3ZEO0FBQ0E7O0FBRTJCOztBQUUzQixjQUFjO0FBQ2QsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUCxhQUFhLGVBQWU7QUFDNUI7QUFDQTs7QUFFQSxhQUFhLHdCQUF3QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLDRDQUFLO0FBQ2pCOztBQUVBLGNBQWM7QUFDZCxJQUFJO0FBQ0osVUFBVSw0Q0FBSztBQUNmOztBQUVBO0FBQ0EsVUFBVSw0Q0FBSztBQUNmOztBQUVBO0FBQ0EsVUFBVSw0Q0FBSztBQUNmOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93d3dfc2hhZG5jbi8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWZyb250bWF0dGVyL2Rldi9tYXR0ZXJzLmpzP2NkN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7J3RvbWwnIHwgJ3lhbWwnfSBQcmVzZXRcbiAqICAgS25vd24gbmFtZSBvZiBhIGZyb250bWF0dGVyIHN0eWxlLlxuICpcbiAqIEB0eXBlZGVmIEluZm9cbiAqICAgU2VxdWVuY2UuXG4gKlxuICogICBEZXBlbmRpbmcgb24gaG93IHRoaXMgc3RydWN0dXJlIGlzIHVzZWQsIGl0IHJlZmxlY3RzIGEgbWFya2VyIG9yIGEgZmVuY2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3BlblxuICogICBPcGVuaW5nLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNsb3NlXG4gKiAgIENsb3NpbmcuXG4gKlxuICogQHR5cGVkZWYgTWF0dGVyUHJvcHNcbiAqICAgRmllbGRzIGRlc2NyaWJpbmcgYSBraW5kIG9mIG1hdHRlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlXG4gKiAgIE5vZGUgdHlwZSB0byB0b2tlbml6ZSBhcy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFthbnl3aGVyZT1mYWxzZV1cbiAqICAgV2hldGhlciBtYXR0ZXIgY2FuIGJlIGZvdW5kIGFueXdoZXJlIGluIHRoZSBkb2N1bWVudCwgbm9ybWFsbHksIG9ubHkgbWF0dGVyXG4gKiAgIGF0IHRoZSBzdGFydCBvZiB0aGUgZG9jdW1lbnQgaXMgcmVjb2duaXplZC5cbiAqXG4gKiAgID4g8J+RiSAqKk5vdGUqKjogdXNpbmcgdGhpcyBpcyBhIHRlcnJpYmxlIGlkZWEuXG4gKiAgID4gSXTigJlzIGNhbGxlZCBmcm9udG1hdHRlciwgbm90IG1hdHRlci1pbi10aGUtbWlkZGxlIG9yIHNvLlxuICogICA+IFRoaXMgbWFrZXMgeW91ciBtYXJrZG93biBsZXNzIHBvcnRhYmxlLlxuICpcbiAqIEB0eXBlZGVmIE1hcmtlclByb3BzXG4gKiAgIE1hcmtlciBjb25maWd1cmF0aW9uLlxuICogQHByb3BlcnR5IHtJbmZvIHwgc3RyaW5nfSBtYXJrZXJcbiAqICAgQ2hhcmFjdGVyIHJlcGVhdGVkIDMgdGltZXMsIHVzZWQgYXMgY29tcGxldGUgZmVuY2VzLlxuICpcbiAqICAgRm9yIGV4YW1wbGUgdGhlIGNoYXJhY3RlciBgJy0nYCB3aWxsIHJlc3VsdCBpbiBgJy0tLSdgIGJlaW5nIHVzZWQgYXMgdGhlXG4gKiAgIGZlbmNlXG4gKiAgIFBhc3MgYG9wZW5gIGFuZCBgY2xvc2VgIHRvIHNwZWNpZnkgZGlmZmVyZW50IGNoYXJhY3RlcnMgZm9yIG9wZW5pbmcgYW5kXG4gKiAgIGNsb3NpbmcgZmVuY2VzLlxuICogQHByb3BlcnR5IHtuZXZlcn0gW2ZlbmNlXVxuICogICBJZiBgbWFya2VyYCBpcyBzZXQsIGBmZW5jZWAgbXVzdCBub3QgYmUgc2V0LlxuICpcbiAqIEB0eXBlZGVmIEZlbmNlUHJvcHNcbiAqICAgRmVuY2UgY29uZmlndXJhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7SW5mbyB8IHN0cmluZ30gZmVuY2VcbiAqICAgQ29tcGxldGUgZmVuY2VzLlxuICpcbiAqICAgVGhpcyBjYW4gYmUgdXNlZCB3aGVuIGZlbmNlcyBjb250YWluIGRpZmZlcmVudCBjaGFyYWN0ZXJzIG9yIGxlbmd0aHNcbiAqICAgb3RoZXIgdGhhbiAzLlxuICogICBQYXNzIGBvcGVuYCBhbmQgYGNsb3NlYCB0byBpbnRlcmZhY2UgdG8gc3BlY2lmeSBkaWZmZXJlbnQgY2hhcmFjdGVycyBmb3Igb3BlbmluZyBhbmRcbiAqICAgY2xvc2luZyBmZW5jZXMuXG4gKiBAcHJvcGVydHkge25ldmVyfSBbbWFya2VyXVxuICogICBJZiBgZmVuY2VgIGlzIHNldCwgYG1hcmtlcmAgbXVzdCBub3QgYmUgc2V0LlxuICpcbiAqIEB0eXBlZGVmIHsoTWF0dGVyUHJvcHMgJiBGZW5jZVByb3BzKSB8IChNYXR0ZXJQcm9wcyAmIE1hcmtlclByb3BzKX0gTWF0dGVyXG4gKiAgIEZpZWxkcyBkZXNjcmliaW5nIGEga2luZCBvZiBtYXR0ZXIuXG4gKlxuICogICA+IPCfkYkgKipOb3RlKio6IHVzaW5nIGBhbnl3aGVyZWAgaXMgYSB0ZXJyaWJsZSBpZGVhLlxuICogICA+IEl04oCZcyBjYWxsZWQgZnJvbnRtYXR0ZXIsIG5vdCBtYXR0ZXItaW4tdGhlLW1pZGRsZSBvciBzby5cbiAqICAgPiBUaGlzIG1ha2VzIHlvdXIgbWFya2Rvd24gbGVzcyBwb3J0YWJsZS5cbiAqXG4gKiAgID4g8J+RiSAqKk5vdGUqKjogYG1hcmtlcmAgYW5kIGBmZW5jZWAgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS5cbiAqICAgPiBJZiBgbWFya2VyYCBpcyBzZXQsIGBmZW5jZWAgbXVzdCBub3QgYmUgc2V0LCBhbmQgdmljZSB2ZXJzYS5cbiAqXG4gKiBAdHlwZWRlZiB7TWF0dGVyIHwgUHJlc2V0IHwgQXJyYXk8TWF0dGVyIHwgUHJlc2V0Pn0gT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICovXG5cbmltcG9ydCB7ZmF1bHR9IGZyb20gJ2ZhdWx0J1xuXG5jb25zdCBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuY29uc3QgbWFya2VycyA9IHt5YW1sOiAnLScsIHRvbWw6ICcrJ31cblxuLyoqXG4gKiBTaW1wbGlmeSBvbmUgb3IgbW9yZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zPSd5YW1sJ11cbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheTxNYXR0ZXI+fVxuICogICBMaXN0IG9mIG1hdHRlcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXR0ZXJzKG9wdGlvbnMpIHtcbiAgLyoqIEB0eXBlIHtBcnJheTxNYXR0ZXI+fSAqL1xuICBjb25zdCByZXN1bHQgPSBbXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIC8qKiBAdHlwZSB7QXJyYXk8TWF0dGVyIHwgUHJlc2V0Pn0gKi9cbiAgY29uc3QgcHJlc2V0c09yTWF0dGVycyA9IEFycmF5LmlzQXJyYXkob3B0aW9ucylcbiAgICA/IG9wdGlvbnNcbiAgICA6IG9wdGlvbnNcbiAgICA/IFtvcHRpb25zXVxuICAgIDogWyd5YW1sJ11cblxuICB3aGlsZSAoKytpbmRleCA8IHByZXNldHNPck1hdHRlcnMubGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IG1hdHRlcihwcmVzZXRzT3JNYXR0ZXJzW2luZGV4XSlcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBTaW1wbGlmeSBhbiBvcHRpb24uXG4gKlxuICogQHBhcmFtIHtNYXR0ZXIgfCBQcmVzZXR9IG9wdGlvblxuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge01hdHRlcn1cbiAqICAgTWF0dGVycy5cbiAqL1xuZnVuY3Rpb24gbWF0dGVyKG9wdGlvbikge1xuICBsZXQgcmVzdWx0ID0gb3B0aW9uXG5cbiAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFvd24uY2FsbChtYXJrZXJzLCByZXN1bHQpKSB7XG4gICAgICB0aHJvdyBmYXVsdCgnTWlzc2luZyBtYXR0ZXIgZGVmaW5pdGlvbiBmb3IgYCVzYCcsIHJlc3VsdClcbiAgICB9XG5cbiAgICByZXN1bHQgPSB7dHlwZTogcmVzdWx0LCBtYXJrZXI6IG1hcmtlcnNbcmVzdWx0XX1cbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IGZhdWx0KCdFeHBlY3RlZCBtYXR0ZXIgdG8gYmUgYW4gb2JqZWN0LCBub3QgYCVqYCcsIHJlc3VsdClcbiAgfVxuXG4gIGlmICghb3duLmNhbGwocmVzdWx0LCAndHlwZScpKSB7XG4gICAgdGhyb3cgZmF1bHQoJ01pc3NpbmcgYHR5cGVgIGluIG1hdHRlciBgJWpgJywgcmVzdWx0KVxuICB9XG5cbiAgaWYgKCFvd24uY2FsbChyZXN1bHQsICdmZW5jZScpICYmICFvd24uY2FsbChyZXN1bHQsICdtYXJrZXInKSkge1xuICAgIHRocm93IGZhdWx0KCdNaXNzaW5nIGBtYXJrZXJgIG9yIGBmZW5jZWAgaW4gbWF0dGVyIGAlamAnLCByZXN1bHQpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-frontmatter/dev/matters.js\n");

/***/ })

};
;